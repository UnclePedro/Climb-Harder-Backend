// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}
 
datasource db {
  provider = "postgresql"
  // Uses connection pooling
  url = env("POSTGRES_PRISMA_URL")
  // Uses direct connection, ⚠️ make sure to keep this to `POSTGRES_URL_NON_POOLING`
  // or you'll have dangling databases from migrations
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id              Int             @id @default(autoincrement())
  apiKey          String          @unique
  seasons         Season[]
  workouts        Workout[]
}

model Season {
  id              Int             @id @default(autoincrement())
  seasonNumber    Int
  workouts        Workout[]       // One-to-many relationship with Workout
  seasonNotes     SeasonNotes?    // One-to-one relationship with SeasonNotes
  user            User            @relation(fields: [userId], references: [id]) // Relation to User
  userId          Int             // Foreign key to the User model
}

model SeasonNotes {
  trainingFocuses   String?
  goals             String?
  achievements      String?
  season            Season        @relation(fields: [seasonId], references: [id])
  seasonId          Int           @id // Foreign key to Season ID
}

model Workout {
  id              Int                @id @default(autoincrement())
  name            String        
  trainingType    TrainingType  
  details         String    
  duration        Int           
  date            DateTime    
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          Int                // Foreign key to User model
  season          Season             @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  seasonId        Int                // Foreign key to Season  
}

// Enum for the different types of training
enum TrainingType {
  Base
  Strength
  Power
  PowerEndurance
  Performance
}